---
# tasks file for users
- name: "Include user definition vars"
  when: (manifest_path is defined) and (manifest_path != "") and users is not defined
  ansible.builtin.include_vars:
    file: "{{ manifest_path }}"

- name: "Read default password and salt"
  ansible.builtin.include_vars:
    file: "{{ def_pw_path }}"

- name: "Fail if the default password is undefined"
  when: "def_pw is undefined"
  ansible.builtin.fail:
    msg: "No default user password defined"

- name: "Create user groups"  # in case UID != GID
  loop: "{{ users }}"
  when: item.gid is defined
  ansible.builtin.group:
    name: "{{ item.name }}"
    gid: "{{ item.gid }}"
    state: "{{ item.state }}"

- name: "Create user accounts"
  loop: "{{ users }}"
  register: useradd
  notify: "Force password change"
  vars:
    home_root: "{{ item.home_root is defined | ternary(item.home_root, default_home_root) }}"
  ansible.builtin.user:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    uid: "{{ item.uid }}"
    create_home: "{{ item.create_home | default(true) }}"
    home: "{{ home_root }}/{{ item.name }}"
    generate_ssh_key: false
    password: "{{ def_pw | password_hash('sha512', salt) }}"
    update_password: "on_create"

- name: "Configure user accounts"  # separate task so that the `passwd -e` handler doesn't trigger
  loop: "{{ users }}"
  ansible.builtin.user:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    comment: "{{ item.full_name }}"
    shell: "{{ item.shell | default('/bin/bash') }}"
    groups: "{{ item.groups | default([]) }}"
    group: "{{ item.name }}"
    append: false
    password_lock: "{{ item.password_lock | default('false') }}"

- name: "Set user account expiration date where defined"
  loop: "{{ users }}"
  when: item.expires is defined
  ansible.builtin.user:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    expires: "{{ (item.expires | to_datetime).strftime('%s') }}"

- name: "Ensure no user account expiration date where undefined"
  loop: "{{ users }}"
  when: item.expires is undefined
  ansible.builtin.user:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    expires: "-1"

- name: "Deploy SSH public keys to 'authorized_keys' files"
  loop: "{{ users }}"
  when: (item.pubkeys_file is defined) and (item.pubkeys_file != "")
  ansible.posix.authorized_key:
    user: "{{ item.name }}"
    key: "{{ lookup('file', item.pubkeys_file) }}"
    key_options: "{{ item.options | default('') }}"
    exclusive: true

- name: "Create systemd slice directories"
  loop: "{{ users }}"
  ansible.builtin.file:
    path: /etc/systemd/system/user-{{ item.uid }}.slice.d
    state: directory
    owner: root
    group: root
    mode: '0750'

# Set user's maximum memory limit to 'memory_limit' defined in the user manifest_path.
# If 'memory_limit' is undefined there, use 'common_memory_max' as fallback.
# If 'common_memory_max' is also undefined, set to "", which should be ignored by the template.
# - 'memory_max:' may use postfix like K, M, G.
# - 'cpu_quota':  "100%" for 1 full core.
# REF https://www.freedesktop.org/software/systemd/man/latest/systemd.resource-control.html
# REF https://serverfault.com/a/1092803
- name: "Create/update systemd slice limit configs"
  loop: "{{ users }}"
  when: item.uid is defined
  register: limit_state
  notify:
    - "Enable user services"
    - "Restart user services (systemd limits)"
  vars:
    memory_max: "{{ (item.memory_max is defined and item.memory_max != '') | ternary(item.memory_max, common_memory_max) | default('') }}"
    cpu_quota: "{{ (item.cpu_quota is defined and item.cpu_quota != '') | ternary(item.cpu_quota, common_cpu_quota) | default('') }}"
  ansible.builtin.template:
    src: slice.j2
    dest: "/etc/systemd/system/user-{{ item.uid }}.slice.d/50-limits.conf"
    owner: root
    group: root
    mode: '0750'
